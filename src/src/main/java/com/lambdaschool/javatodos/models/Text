The table layouts are as follows:

All tables should have audit fields / columns - createby createddate modifiedby modifieddate

Note these are the minimum fields required. More is okay.

TODO

todoid primary key, not null long

description string, not null
datestarted datetime
userid foreign key (one user to many todos) not null

completed boolean

USERS

userid primary key, not null long
username string, not null unique
primaryemail string, not null unique
password string, not null

ROLES

roleid primary key, not null long
rolename string not null unique

USERROLES

roleid foreign key to role
userid foreign key to user

  // http://localhost:2019/users/mine
    @GetMapping(value = "/mine",
            produces = {"application/json"})
    public ResponseEntity<?> getMyTodo(Authentication authentication)
    {
        User user = userService.findByName(authentication.getName());
        return new ResponseEntity<>(user, HttpStatus.OK);
    }

    //////




    Expose the following end points

    GET /users/mine - return the user and todo based off of the authenticated user. You can only look up your own. It is okay if this also lists the users roles and authorities.


    POST /users/user - adds a user. Can only be done by an admin.
    {
        "username": "hops",
        "password": "password",
        "primaryemail" : "hops@bunny.hop",
        "userroles": [
            {
                "role": {
                    "roleid": 2
                }
            }
        ],
        "todos": [
            {
                "description": "Eat Carrots",
                "datestarted": "2019-08-16T01:44:18.089+0000"
            },
            {
                "description": "Bang on cage until everyone is awake",
                "datestarted": "2019-08-16T01:44:18.089+0000"
            }
        ]
    }
    POST /users/todo/{userid} - adds a todo to the assigned user. Can be done by any user. You can add this todo
    {
        "description": "Have Fun",
        "datestarted": "2019-01-01T01:00"
    }

    PUT /todos/todoid/{todoid} - updates a todo based on todoid. Can be done by any user. Note: null boolean is not a thing - it is false, so just set compeleted to whatever comes across in the RequestBody.
    {
        "completed": true
    }

    DELETE /users/user/{userid} - Deletes a user based off of their userid and deletes all their associated todos. Can only be done by an admin.